// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace QuantumServicesAPI.Features.OCRService
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OCR Service")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("DataSource:ocr-environments.json")]
    [NUnit.Framework.CategoryAttribute("DataSet:OcrService")]
    public partial class OCRServiceFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "DataSource:ocr-environments.json",
                "DataSet:OcrService"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/OCRService", "OCR Service", @"A short summary of the feature:
The OCR Service provides an API to extract text from images in supported formats (JPEG, PNG, BMP, PDF, TIFF), enforces file size and format restrictions, requires API key authentication, and is designed for deployment across multiple cloud regions. This feature file specifies the expected behavior and test cases for the OCR Service.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "OCRService.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01Test Case ID 1769058: Verify that the OCR service returns a list of all identif" +
            "ied character strings from the image provided")]
        [NUnit.Framework.CategoryAttribute("ocrservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/ocr-service/v1", "39731117349c436792eca8513c7d2eb6", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/ocr-service/v1", "9d6eb02ecab94926a74bcd5edccf28fa", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/ocr-service/v1", "69df563662e74ba8811e47a9a61ccf7b", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/ocr-service/v1", "781b802322d248079ba7cce2abc2531a", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/ocr-service/v1", "74ccd49dac554d16b395ba814ed324c9", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/ocr-service/v1", "891b8ea3a52d4cce94d436d633eb1b07", null)]
        public async global::System.Threading.Tasks.Task _01TestCaseID1769058VerifyThatTheOCRServiceReturnsAListOfAllIdentifiedCharacterStringsFromTheImageProvided(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ocrservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01Test Case ID 1769058: Verify that the OCR service returns a list of all identif" +
                    "ied character strings from the image provided", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table23 = new global::Reqnroll.Table(new string[] {
                            "ImageFormat"});
                table23.AddRow(new string[] {
                            "PNGImage.png"});
#line 26
 await testRunner.WhenAsync(string.Format("Send the request with a correct image as input using baseUrl \"{0}\" and apiKey \"{1" +
                            "}\"", baseUrl, apiKey), ((string)(null)), table23, "When ");
#line hidden
#line 29
 await testRunner.AndAsync("Verify the response when correct image is inputted", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
 await testRunner.ThenAsync("The response must contain a list of all the identified character strings.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02Test Case ID 1769060: Verify that the OCR service does not accept image with si" +
            "ze more than 256kb")]
        [NUnit.Framework.CategoryAttribute("ocrservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/ocr-service/v1", "39731117349c436792eca8513c7d2eb6", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/ocr-service/v1", "9d6eb02ecab94926a74bcd5edccf28fa", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/ocr-service/v1", "69df563662e74ba8811e47a9a61ccf7b", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/ocr-service/v1", "781b802322d248079ba7cce2abc2531a", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/ocr-service/v1", "74ccd49dac554d16b395ba814ed324c9", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/ocr-service/v1", "891b8ea3a52d4cce94d436d633eb1b07", null)]
        public async global::System.Threading.Tasks.Task _02TestCaseID1769060VerifyThatTheOCRServiceDoesNotAcceptImageWithSizeMoreThan256Kb(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ocrservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02Test Case ID 1769060: Verify that the OCR service does not accept image with si" +
                    "ze more than 256kb", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table24 = new global::Reqnroll.Table(new string[] {
                            "ImageFormat"});
                table24.AddRow(new string[] {
                            "More256KBImage.jpg"});
#line 35
 await testRunner.WhenAsync(string.Format("Send a request with input as an image in PNG format with size more than 256kb usi" +
                            "ng baseUrl \"{0}\" and apiKey \"{1}\"", baseUrl, apiKey), ((string)(null)), table24, "When ");
#line hidden
#line 38
 await testRunner.ThenAsync("Verify the response when image size is more than 256kb", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table25 = new global::Reqnroll.Table(new string[] {
                            "ImageFormat"});
                table25.AddRow(new string[] {
                            "Less256KBImage.png"});
#line 39
 await testRunner.WhenAsync(string.Format("Send a request with input as an image in PNG format with size less than 256kb usi" +
                            "ng baseUrl \"{0}\" and apiKey \"{1}\"", baseUrl, apiKey), ((string)(null)), table25, "When ");
#line hidden
#line 42
 await testRunner.ThenAsync("Verify the response when image size is less than 256kb", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 43
 await testRunner.AndAsync("The response must contain a list of all the identified character strings.", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03Test Case ID 1769076: Verify that the OCR service returns an empty list as resp" +
            "onse when a blurry image is passed as an input.")]
        [NUnit.Framework.CategoryAttribute("ocrservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/ocr-service/v1", "39731117349c436792eca8513c7d2eb6", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/ocr-service/v1", "9d6eb02ecab94926a74bcd5edccf28fa", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/ocr-service/v1", "69df563662e74ba8811e47a9a61ccf7b", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/ocr-service/v1", "781b802322d248079ba7cce2abc2531a", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/ocr-service/v1", "74ccd49dac554d16b395ba814ed324c9", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/ocr-service/v1", "891b8ea3a52d4cce94d436d633eb1b07", null)]
        public async global::System.Threading.Tasks.Task _03TestCaseID1769076VerifyThatTheOCRServiceReturnsAnEmptyListAsResponseWhenABlurryImageIsPassedAsAnInput_(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ocrservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03Test Case ID 1769076: Verify that the OCR service returns an empty list as resp" +
                    "onse when a blurry image is passed as an input.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table26 = new global::Reqnroll.Table(new string[] {
                            "ImageFormat"});
                table26.AddRow(new string[] {
                            "BlurryPNGImage.png"});
#line 48
 await testRunner.WhenAsync(string.Format("Send the request with a blurry image as input using baseUrl \"{0}\" and apiKey \"{1}" +
                            "\"", baseUrl, apiKey), ((string)(null)), table26, "When ");
#line hidden
#line 51
 await testRunner.ThenAsync("Verify the response when the inputted image is blurry", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 52
 await testRunner.AndAsync("The response must contain an empty list.", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04Test Case ID 1776266: Verify that the OCR service returns an empty list as resp" +
            "onse when an invalid image is passed as an input.")]
        [NUnit.Framework.CategoryAttribute("ocrservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/ocr-service/v1", "39731117349c436792eca8513c7d2eb6", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/ocr-service/v1", "9d6eb02ecab94926a74bcd5edccf28fa", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/ocr-service/v1", "69df563662e74ba8811e47a9a61ccf7b", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/ocr-service/v1", "781b802322d248079ba7cce2abc2531a", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/ocr-service/v1", "74ccd49dac554d16b395ba814ed324c9", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/ocr-service/v1", "891b8ea3a52d4cce94d436d633eb1b07", null)]
        public async global::System.Threading.Tasks.Task _04TestCaseID1776266VerifyThatTheOCRServiceReturnsAnEmptyListAsResponseWhenAnInvalidImageIsPassedAsAnInput_(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ocrservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04Test Case ID 1776266: Verify that the OCR service returns an empty list as resp" +
                    "onse when an invalid image is passed as an input.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table27 = new global::Reqnroll.Table(new string[] {
                            "ImageFormat"});
                table27.AddRow(new string[] {
                            "NoCharacters.png"});
#line 57
 await testRunner.WhenAsync(string.Format("Send the request with an invalid image (no characters) using baseUrl \"{0}\" and ap" +
                            "iKey \"{1}\"", baseUrl, apiKey), ((string)(null)), table27, "When ");
#line hidden
#line 60
 await testRunner.ThenAsync("Verify the response when the inputted image is an invalid image (no characters)", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 61
 await testRunner.AndAsync("The response must contain an empty list.", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05Test Case ID 1780460: Verify that requests sent to the OCR Service with an inva" +
            "lid API key are rejected")]
        [NUnit.Framework.CategoryAttribute("ocrservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/ocr-service/v1", "39731117349c436792eca8513c7d2eb6", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/ocr-service/v1", "9d6eb02ecab94926a74bcd5edccf28fa", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/ocr-service/v1", "69df563662e74ba8811e47a9a61ccf7b", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/ocr-service/v1", "781b802322d248079ba7cce2abc2531a", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/ocr-service/v1", "74ccd49dac554d16b395ba814ed324c9", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/ocr-service/v1", "891b8ea3a52d4cce94d436d633eb1b07", null)]
        public async global::System.Threading.Tasks.Task _05TestCaseID1780460VerifyThatRequestsSentToTheOCRServiceWithAnInvalidAPIKeyAreRejected(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ocrservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("05Test Case ID 1780460: Verify that requests sent to the OCR Service with an inva" +
                    "lid API key are rejected", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table28 = new global::Reqnroll.Table(new string[] {
                            "ImageFormat"});
                table28.AddRow(new string[] {
                            "NoCharacters.png"});
#line 66
 await testRunner.WhenAsync(string.Format("Send a request using an invalid API key \"{0}\" with baseUrl \"{1}\"", apiKey, baseUrl), ((string)(null)), table28, "When ");
#line hidden
#line 69
 await testRunner.ThenAsync("The request is rejected and returns a 401 Unauthorized error", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06Test Case ID 1780459: Verify that requests without an API key for OCR Service a" +
            "re rejected")]
        [NUnit.Framework.CategoryAttribute("ocrservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/ocr-service/v1", "39731117349c436792eca8513c7d2eb6", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/ocr-service/v1", "9d6eb02ecab94926a74bcd5edccf28fa", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/ocr-service/v1", "69df563662e74ba8811e47a9a61ccf7b", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/ocr-service/v1", "781b802322d248079ba7cce2abc2531a", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/ocr-service/v1", "74ccd49dac554d16b395ba814ed324c9", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/ocr-service/v1", "891b8ea3a52d4cce94d436d633eb1b07", null)]
        public async global::System.Threading.Tasks.Task _06TestCaseID1780459VerifyThatRequestsWithoutAnAPIKeyForOCRServiceAreRejected(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ocrservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("06Test Case ID 1780459: Verify that requests without an API key for OCR Service a" +
                    "re rejected", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                            "ImageFormat"});
                table29.AddRow(new string[] {
                            "PNGImage.png"});
#line 74
 await testRunner.WhenAsync(string.Format("Send a request without API key \"{0}\" with baseUrl \"{1}\"", apiKey, baseUrl), ((string)(null)), table29, "When ");
#line hidden
#line 77
 await testRunner.ThenAsync("The request is rejected and returns a 401 Unauthorized error", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("07Test Case ID 1780458: Verify that requests with a valid API key for OCR Service" +
            " are authenticated successfully")]
        [NUnit.Framework.CategoryAttribute("ocrservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/ocr-service/v1", "39731117349c436792eca8513c7d2eb6", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/ocr-service/v1", "9d6eb02ecab94926a74bcd5edccf28fa", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/ocr-service/v1", "69df563662e74ba8811e47a9a61ccf7b", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/ocr-service/v1", "781b802322d248079ba7cce2abc2531a", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/ocr-service/v1", "74ccd49dac554d16b395ba814ed324c9", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/ocr-service/v1", "891b8ea3a52d4cce94d436d633eb1b07", null)]
        public async global::System.Threading.Tasks.Task _07TestCaseID1780458VerifyThatRequestsWithAValidAPIKeyForOCRServiceAreAuthenticatedSuccessfully(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ocrservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("07Test Case ID 1780458: Verify that requests with a valid API key for OCR Service" +
                    " are authenticated successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table30 = new global::Reqnroll.Table(new string[] {
                            "ImageFormat"});
                table30.AddRow(new string[] {
                            "PNGImage.png"});
#line 82
 await testRunner.WhenAsync(string.Format("Send the request with baseUrl \"{0}\" and correct API key \"{1}\" as input", baseUrl, apiKey), ((string)(null)), table30, "When ");
#line hidden
#line 85
 await testRunner.ThenAsync("Verify the response when correct APIkey is inputted", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("08Test Case ID 1769059: Verify that the OCR service only accepts supported image " +
            "formats (JPEG, PNG, BMP, PDF, and TIFF)")]
        [NUnit.Framework.CategoryAttribute("ocrservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/ocr-service/v1", "39731117349c436792eca8513c7d2eb6", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/ocr-service/v1", "9d6eb02ecab94926a74bcd5edccf28fa", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/ocr-service/v1", "69df563662e74ba8811e47a9a61ccf7b", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/ocr-service/v1", "781b802322d248079ba7cce2abc2531a", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/ocr-service/v1", "74ccd49dac554d16b395ba814ed324c9", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/ocr-service/v1", "891b8ea3a52d4cce94d436d633eb1b07", null)]
        public async global::System.Threading.Tasks.Task _08TestCaseID1769059VerifyThatTheOCRServiceOnlyAcceptsSupportedImageFormatsJPEGPNGBMPPDFAndTIFF(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ocrservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("08Test Case ID 1769059: Verify that the OCR service only accepts supported image " +
                    "formats (JPEG, PNG, BMP, PDF, and TIFF)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table31 = new global::Reqnroll.Table(new string[] {
                            "ImageFormat"});
                table31.AddRow(new string[] {
                            "JPEGImage.jpeg"});
                table31.AddRow(new string[] {
                            "PNGImage.png"});
                table31.AddRow(new string[] {
                            "BMPImage.bmp"});
                table31.AddRow(new string[] {
                            "PDFImage.pdf"});
                table31.AddRow(new string[] {
                            "TIFFImage.tiff"});
#line 90
 await testRunner.WhenAsync(string.Format("Send a request with input as an image in a supported format (JPEG, PNG, BMP, PDF," +
                            " TIFF) using baseUrl \"{0}\" and apiKey \"{1}\" and verify the response and list of " +
                            "all the identified character strings", baseUrl, apiKey), ((string)(null)), table31, "When ");
#line hidden
                global::Reqnroll.Table table32 = new global::Reqnroll.Table(new string[] {
                            "ImageFormat"});
                table32.AddRow(new string[] {
                            "GIFImage.gif"});
                table32.AddRow(new string[] {
                            "WEBPImage.webp"});
                table32.AddRow(new string[] {
                            "SVGImage.svg"});
#line 97
 await testRunner.AndAsync(string.Format("Send a request with input as an image in an unsupported format (Ex: GIF, WEBP, SV" +
                            "G, etc.) using baseUrl \"{0}\" and apiKey \"{1}\" and verify the 400 error returned", baseUrl, apiKey), ((string)(null)), table32, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("09Test Case ID 1780485: Verify the Response Time for OCR Service Under Normal Con" +
            "ditions")]
        [NUnit.Framework.CategoryAttribute("ocrservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/ocr-service/v1", "39731117349c436792eca8513c7d2eb6", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/ocr-service/v1", "9d6eb02ecab94926a74bcd5edccf28fa", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/ocr-service/v1", "69df563662e74ba8811e47a9a61ccf7b", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/ocr-service/v1", "781b802322d248079ba7cce2abc2531a", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/ocr-service/v1", "74ccd49dac554d16b395ba814ed324c9", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/ocr-service/v1", "891b8ea3a52d4cce94d436d633eb1b07", null)]
        public async global::System.Threading.Tasks.Task _09TestCaseID1780485VerifyTheResponseTimeForOCRServiceUnderNormalConditions(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ocrservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("09Test Case ID 1780485: Verify the Response Time for OCR Service Under Normal Con" +
                    "ditions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table33 = new global::Reqnroll.Table(new string[] {
                            "ImageFormat"});
                table33.AddRow(new string[] {
                            "PNGImage.png"});
#line 106
 await testRunner.WhenAsync(string.Format("Send a request to the OCR service under normal system load using baseUrl \"{0}\" an" +
                            "d apiKey \"{1}\" and verify the median response time", baseUrl, apiKey), ((string)(null)), table33, "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("10Test Case ID 1780470: Verify OCR Service Deployment in Each Cloud Region")]
        [NUnit.Framework.CategoryAttribute("ocrservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/ocr-service/v1", "39731117349c436792eca8513c7d2eb6", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/ocr-service/v1", "9d6eb02ecab94926a74bcd5edccf28fa", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/ocr-service/v1", "69df563662e74ba8811e47a9a61ccf7b", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/ocr-service/v1", "781b802322d248079ba7cce2abc2531a", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/ocr-service/v1", "74ccd49dac554d16b395ba814ed324c9", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/ocr-service/v1", "891b8ea3a52d4cce94d436d633eb1b07", null)]
        public async global::System.Threading.Tasks.Task _10TestCaseID1780470VerifyOCRServiceDeploymentInEachCloudRegion(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ocrservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("10Test Case ID 1780470: Verify OCR Service Deployment in Each Cloud Region", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table34 = new global::Reqnroll.Table(new string[] {
                            "ImageFormat"});
                table34.AddRow(new string[] {
                            "PNGImage.png"});
#line 113
 await testRunner.WhenAsync(string.Format("OCR service is deployed to all the cloud regions using baseUrl \"{0}\" and apiKey \"" +
                            "{1}\"", baseUrl, apiKey), ((string)(null)), table34, "When ");
#line hidden
#line 116
 await testRunner.AndAsync("OCR service should be operational in all the cloud region", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
