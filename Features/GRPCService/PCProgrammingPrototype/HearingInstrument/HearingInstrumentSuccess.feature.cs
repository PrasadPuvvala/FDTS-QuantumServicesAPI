// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace QuantumServicesAPI.Features.GRPCService.PCProgrammingPrototype.HearingInstrument
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("HearingInstrument Success")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class HearingInstrumentSuccessFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/GRPCService/PCProgrammingPrototype/HearingInstrument", "HearingInstrument Success", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "HearingInstrumentSuccess.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01Test Case ID 1809101: [Avalon Service] Verify DetectBySerialNumber API Returns " +
            "\'Success\' When Valid Serial Number Matches a Device")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _01TestCaseID1809101AvalonServiceVerifyDetectBySerialNumberAPIReturnsSuccessWhenValidSerialNumberMatchesADevice()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01Test Case ID 1809101: [Avalon Service] Verify DetectBySerialNumber API Returns " +
                    "\'Success\' When Valid Serial Number Matches a Device", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "SerialNumber"});
                table6.AddRow(new string[] {
                            "2400801520"});
#line 8
 await testRunner.WhenAsync("Send a request to the DetectBySerialNumber API with a valid serial number that ma" +
                        "tches an existing device", ((string)(null)), table6, "When ");
#line hidden
#line 11
 await testRunner.ThenAsync("API returns device node data and AvalonStatus \"Success\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02Test Case ID 1807206: [Avalon Service] Verify DetectClosest API Returns Correct" +
            " Device Node Data for One or Multiple Devices")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _02TestCaseID1807206AvalonServiceVerifyDetectClosestAPIReturnsCorrectDeviceNodeDataForOneOrMultipleDevices()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02Test Case ID 1807206: [Avalon Service] Verify DetectClosest API Returns Correct" +
                    " Device Node Data for One or Multiple Devices", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
 await testRunner.WhenAsync("Send a request to the DetectClosest API when one device is found", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
 await testRunner.ThenAsync("API returns the correct device node data and AvalonStatus \"Success\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03Test Case ID 1809108: [Avalon Service] Verify DetectWired API Returns \'Success\'" +
            " When Device Is Found for Monaural Side")]
        [NUnit.Framework.CategoryAttribute("HearingUnstrument")]
        public async global::System.Threading.Tasks.Task _03TestCaseID1809108AvalonServiceVerifyDetectWiredAPIReturnsSuccessWhenDeviceIsFoundForMonauralSide()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingUnstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03Test Case ID 1809108: [Avalon Service] Verify DetectWired API Returns \'Success\'" +
                    " When Device Is Found for Monaural Side", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 22
 await testRunner.WhenAsync("Send a request to the DetectWired API with a valid monoaural side (e.g., \"Left/Ri" +
                        "ght\") when a device is connected", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
 await testRunner.ThenAsync("API returns the device node data and status \"Success\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04Test Case ID 1809122: [Avalon Service] Verify DeviceNodeData API Returns Device" +
            " Node Details When Device Is Connected")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _04TestCaseID1809122AvalonServiceVerifyDeviceNodeDataAPIReturnsDeviceNodeDetailsWhenDeviceIsConnected()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04Test Case ID 1809122: [Avalon Service] Verify DeviceNodeData API Returns Device" +
                    " Node Details When Device Is Connected", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 28
 await testRunner.WhenAsync("Connect a supported device Send a request to the DeviceNodeData API", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
 await testRunner.ThenAsync("API returns complete device node data", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05Test Case ID 1809114: [Avalon Service] Verify ConnectToDevice API Returns \'Succ" +
            "ess\' When Valid Device Node Data Is Provided")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _05TestCaseID1809114AvalonServiceVerifyConnectToDeviceAPIReturnsSuccessWhenValidDeviceNodeDataIsProvided()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("05Test Case ID 1809114: [Avalon Service] Verify ConnectToDevice API Returns \'Succ" +
                    "ess\' When Valid Device Node Data Is Provided", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 34
 await testRunner.WhenAsync("Send a request to the ConnectToDevice API with valid and detected device node dat" +
                        "a", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
 await testRunner.ThenAsync("API successfully connects to the device and returns status \"Success\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06Test Case ID 1809127: [Avalon Service] Verify CheckBootMode API Returns Boot Mo" +
            "de of the Connected Device")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _06TestCaseID1809127AvalonServiceVerifyCheckBootModeAPIReturnsBootModeOfTheConnectedDevice()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("06Test Case ID 1809127: [Avalon Service] Verify CheckBootMode API Returns Boot Mo" +
                    "de of the Connected Device", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 40
 await testRunner.WhenAsync("Connect a supported device Send a request to the CheckBootMode API", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
 await testRunner.ThenAsync("API returns the current boot mode of the connected device", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("07Test Case ID 1810795: [Avalon Service] Verify BootDevice API Boots Device with " +
            "selected Boot mode and reconnects when reconnect flag is True")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _07TestCaseID1810795AvalonServiceVerifyBootDeviceAPIBootsDeviceWithSelectedBootModeAndReconnectsWhenReconnectFlagIsTrue()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("07Test Case ID 1810795: [Avalon Service] Verify BootDevice API Boots Device with " +
                    "selected Boot mode and reconnects when reconnect flag is True", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "BootType"});
                table7.AddRow(new string[] {
                            "ServiceMode"});
                table7.AddRow(new string[] {
                            "DfuMode"});
                table7.AddRow(new string[] {
                            "DspRunning"});
#line 46
 await testRunner.WhenAsync("Send a request to the BootDevice API with any boot type when reconnect flag is se" +
                        "t to True and verify the response", ((string)(null)), table7, "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("08Test Case ID 1810811: [Avalon Service] Verify FlashWriteProtect API returns cur" +
            "rent Flash Write Protect status on read request")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _08TestCaseID1810811AvalonServiceVerifyFlashWriteProtectAPIReturnsCurrentFlashWriteProtectStatusOnReadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("08Test Case ID 1810811: [Avalon Service] Verify FlashWriteProtect API returns cur" +
                    "rent Flash Write Protect status on read request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 55
 await testRunner.WhenAsync("Send a request to the FlashWriteProtect API to read current status", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 56
 await testRunner.ThenAsync("API returns one of the valid states \"NotLocked\" , \"Locked\" & \"LockedPermanent\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("09Test Case ID 1810812: [Avalon Service] Verify FlashWriteProtect API sets Flash " +
            "Write Protect state to \'Lock\' and returns updated status")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _09TestCaseID1810812AvalonServiceVerifyFlashWriteProtectAPISetsFlashWriteProtectStateToLockAndReturnsUpdatedStatus()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("09Test Case ID 1810812: [Avalon Service] Verify FlashWriteProtect API sets Flash " +
                    "Write Protect state to \'Lock\' and returns updated status", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 61
 await testRunner.WhenAsync("Send a request to the FlashWriteProtect API with state as \"Lock\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 62
 await testRunner.ThenAsync("API returns status as \"Lock\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("10Test Case ID 1810813: [Avalon Service] Verify FlashWriteProtect API sets Flash " +
            "Write Protect state to \'UnLock\' and returns updated status")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _10TestCaseID1810813AvalonServiceVerifyFlashWriteProtectAPISetsFlashWriteProtectStateToUnLockAndReturnsUpdatedStatus()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("10Test Case ID 1810813: [Avalon Service] Verify FlashWriteProtect API sets Flash " +
                    "Write Protect state to \'UnLock\' and returns updated status", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 67
 await testRunner.WhenAsync("Send a request to the FlashWriteProtect API with state as \"UnLock\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 68
 await testRunner.ThenAsync("API returns status as \"UnLock\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("11Test Case ID 1810815: [Avalon Service] Verify FlashWriteProtect API sets Flash " +
            "Write Protect state to \'LockedPermanent\' and returns updated status")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _11TestCaseID1810815AvalonServiceVerifyFlashWriteProtectAPISetsFlashWriteProtectStateToLockedPermanentAndReturnsUpdatedStatus()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("11Test Case ID 1810815: [Avalon Service] Verify FlashWriteProtect API sets Flash " +
                    "Write Protect state to \'LockedPermanent\' and returns updated status", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 73
 await testRunner.WhenAsync("Send a request to the FlashWriteProtect API with state set as \"LockPermanent\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 74
 await testRunner.ThenAsync("API returns status as \"LockPermanent\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("12Test ID Case 1840256: [HI Automation] Verify FlashWriteProtect API does not all" +
            "ow changing state from \'LockedPermanent\' to \'Lock\'")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _12TestIDCase1840256HIAutomationVerifyFlashWriteProtectAPIDoesNotAllowChangingStateFromLockedPermanentToLock()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("12Test ID Case 1840256: [HI Automation] Verify FlashWriteProtect API does not all" +
                    "ow changing state from \'LockedPermanent\' to \'Lock\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 79
 await testRunner.WhenAsync("Send a request to FlashWriteProtect API with state \"Lock\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 80
 await testRunner.ThenAsync("API returns status as \"LockPermanent\" when state is set to Lock", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("13Test Case ID 1810947: [HI Automation] Verify FlashWriteProtect API does not all" +
            "ow changing state from \'LockedPermanent\' to \'UnLock\'")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _13TestCaseID1810947HIAutomationVerifyFlashWriteProtectAPIDoesNotAllowChangingStateFromLockedPermanentToUnLock()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("13Test Case ID 1810947: [HI Automation] Verify FlashWriteProtect API does not all" +
                    "ow changing state from \'LockedPermanent\' to \'UnLock\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 85
 await testRunner.WhenAsync("Send a request to FlashWriteProtect API with state \"UnLock\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 86
 await testRunner.ThenAsync("API returns status as \"LockPermanent\" when state is set to UnLock", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("14Test Case ID 1809214: [Avalon Service] Verify RHI Status API Returns \'False\' fo" +
            "r Non-Rechargeable Devices")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _14TestCaseID1809214AvalonServiceVerifyRHIStatusAPIReturnsFalseForNon_RechargeableDevices()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("14Test Case ID 1809214: [Avalon Service] Verify RHI Status API Returns \'False\' fo" +
                    "r Non-Rechargeable Devices", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 91
 await testRunner.WhenAsync("Connect a non-rechargeable device and send a request to the RHI Status API", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 92
 await testRunner.ThenAsync("API returns \"False\" for the RHI status", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("15Test Case ID 1809213: [Avalon Service] Verify RHI Status API Returns \'True\' for" +
            " Rechargeable Devices")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _15TestCaseID1809213AvalonServiceVerifyRHIStatusAPIReturnsTrueForRechargeableDevices()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("15Test Case ID 1809213: [Avalon Service] Verify RHI Status API Returns \'True\' for" +
                    " Rechargeable Devices", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 97
 await testRunner.WhenAsync("Connect a rechargeable RHI device and send a request to the RHI Status API", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 98
 await testRunner.ThenAsync("API returns \"True\" for the RHI status", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("16Test Case ID 1809130: [Avalon Service] Verify RHIBatteryLevel API Returns Batte" +
            "ry Level of the Connected Device")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _16TestCaseID1809130AvalonServiceVerifyRHIBatteryLevelAPIReturnsBatteryLevelOfTheConnectedDevice()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("16Test Case ID 1809130: [Avalon Service] Verify RHIBatteryLevel API Returns Batte" +
                    "ry Level of the Connected Device", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 103
 await testRunner.WhenAsync("Connect a supported RHI device Send a request to the RHIBatteryLevel API", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 104
 await testRunner.ThenAsync("API returns the battery level of the device values between 0 to 10", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("17Test Case ID 1809222: [Avalon Service] Verify MFI Chip Health API Returns \'Fals" +
            "e\' When MFI Chip Is Unhealthy")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _17TestCaseID1809222AvalonServiceVerifyMFIChipHealthAPIReturnsFalseWhenMFIChipIsUnhealthy()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("17Test Case ID 1809222: [Avalon Service] Verify MFI Chip Health API Returns \'Fals" +
                    "e\' When MFI Chip Is Unhealthy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 107
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 109
 await testRunner.WhenAsync("Send a request to the MFI Chip Health API with a connected device having unhealth" +
                        "y MFI chip", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 110
 await testRunner.ThenAsync("API returns \"False\" for the MFI chip health status", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("18Test Case ID 1809221: [Avalon Service] Verify MFI Chip Health API Returns \'True" +
            "\' When MFI Chip Is Healthy")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _18TestCaseID1809221AvalonServiceVerifyMFIChipHealthAPIReturnsTrueWhenMFIChipIsHealthy()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("18Test Case ID 1809221: [Avalon Service] Verify MFI Chip Health API Returns \'True" +
                    "\' When MFI Chip Is Healthy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 115
 await testRunner.WhenAsync("Send a request to the MFI Chip Health API with a connected device having healthy " +
                        "MFI chip", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 116
 await testRunner.ThenAsync("API returns \"True\" for the MFI chip health status", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("19Test Case ID 1809218: [Avalon Service] Verify RHI Battery Type API Reads Batter" +
            "y Type from Device Successfully")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _19TestCaseID1809218AvalonServiceVerifyRHIBatteryTypeAPIReadsBatteryTypeFromDeviceSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("19Test Case ID 1809218: [Avalon Service] Verify RHI Battery Type API Reads Batter" +
                    "y Type from Device Successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 121
 await testRunner.WhenAsync("Send a request to the RHI Battery Type API to read the battery type from the conn" +
                        "ected RHI device", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 122
 await testRunner.ThenAsync("API returns the correct battery type from the device", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("20Test Case ID 1809217: [Avalon Service] Verify RHI Battery Type API Writes Batte" +
            "ry Type to Device Successfully")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _20TestCaseID1809217AvalonServiceVerifyRHIBatteryTypeAPIWritesBatteryTypeToDeviceSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("20Test Case ID 1809217: [Avalon Service] Verify RHI Battery Type API Writes Batte" +
                    "ry Type to Device Successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "BatteryType"});
                table8.AddRow(new string[] {
                            "Mic-Power 9440"});
#line 127
 await testRunner.WhenAsync("Send a request to the RHI Battery Type API with a valid battery type to write to " +
                        "the connected RHI device", ((string)(null)), table8, "When ");
#line hidden
#line 130
 await testRunner.ThenAsync("Battery type is successfully written to the device", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("21Test Case ID 1810951: [Avalon Service] Verify ReadBatteryVoltage API returns ba" +
            "ttery voltage values for a RHI device")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _21TestCaseID1810951AvalonServiceVerifyReadBatteryVoltageAPIReturnsBatteryVoltageValuesForARHIDevice()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("21Test Case ID 1810951: [Avalon Service] Verify ReadBatteryVoltage API returns ba" +
                    "ttery voltage values for a RHI device", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 133
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 135
 await testRunner.WhenAsync("Send a request to the ReadBatteryVoltage API on a RHI device", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 136
 await testRunner.ThenAsync("API returns valid values for Voltage,MinimumVoltage,MaximumVoltage", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("22Test Case ID 1809226: [Avalon Service] Verify DeviceFunctional API Makes Device" +
            " Functional When \'Enable Functionality\' Is Set to True")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _22TestCaseID1809226AvalonServiceVerifyDeviceFunctionalAPIMakesDeviceFunctionalWhenEnableFunctionalityIsSetToTrue()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("22Test Case ID 1809226: [Avalon Service] Verify DeviceFunctional API Makes Device" +
                    " Functional When \'Enable Functionality\' Is Set to True", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 139
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 141
 await testRunner.WhenAsync("Send a request to the DeviceFunctional API with enable functionality is \"true\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 142
 await testRunner.ThenAsync("Verify the response when enable functionality input is set to true", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("23Test Case ID 1809227: [Avalon Service] Verify DeviceFunctional API Makes Device" +
            " Functional When \'Enable Functionality\' Is Set to False")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _23TestCaseID1809227AvalonServiceVerifyDeviceFunctionalAPIMakesDeviceFunctionalWhenEnableFunctionalityIsSetToFalse()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("23Test Case ID 1809227: [Avalon Service] Verify DeviceFunctional API Makes Device" +
                    " Functional When \'Enable Functionality\' Is Set to False", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 145
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 147
 await testRunner.WhenAsync("Send a request to the DeviceFunctional API with enable functionality is \"false\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 148
 await testRunner.ThenAsync("Verify the response when enable functionality input is set to false", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("24Test Case ID 1809231: [Avalon Service] Verify RHIPowerOff API Powers Off the De" +
            "vice When Requested")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _24TestCaseID1809231AvalonServiceVerifyRHIPowerOffAPIPowersOffTheDeviceWhenRequested()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("24Test Case ID 1809231: [Avalon Service] Verify RHIPowerOff API Powers Off the De" +
                    "vice When Requested", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 151
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 153
 await testRunner.WhenAsync("Send a request to the RHIPowerOff API to power off the connected RHI device", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 154
 await testRunner.ThenAsync("Verify the response when RHIPowerOff API is called", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
