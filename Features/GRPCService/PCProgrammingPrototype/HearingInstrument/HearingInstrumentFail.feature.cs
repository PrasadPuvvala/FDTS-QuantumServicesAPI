// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace QuantumServicesAPI.Features.GRPCService.PCProgrammingPrototype.HearingInstrument
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("HearingInstrument Fail")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class HearingInstrumentFailFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/GRPCService/PCProgrammingPrototype/HearingInstrument", "HearingInstrument Fail", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "HearingInstrumentFail.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01Test Case ID 1809102: [Avalon Service] Verify DetectBySerialNumber API Returns " +
            "\'DeviceNotFound\' When No Matching Serial Number Exists")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _01TestCaseID1809102AvalonServiceVerifyDetectBySerialNumberAPIReturnsDeviceNotFoundWhenNoMatchingSerialNumberExists()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01Test Case ID 1809102: [Avalon Service] Verify DetectBySerialNumber API Returns " +
                    "\'DeviceNotFound\' When No Matching Serial Number Exists", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "SerialNumber"});
                table1.AddRow(new string[] {
                            "2400801519"});
#line 8
 await testRunner.WhenAsync("Send a request to the DetectBySerialNumber API with a valid serial number that do" +
                        "es not match any device.", ((string)(null)), table1, "When ");
#line hidden
#line 11
 await testRunner.ThenAsync("API returns null for device node data and status \"DeviceNotfound\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02Test Case ID 1807118: [Avalon Service] Verify DetectClosest API Returns \'Device" +
            "NotFound\' When No Devices Are Nearby")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _02TestCaseID1807118AvalonServiceVerifyDetectClosestAPIReturnsDeviceNotFoundWhenNoDevicesAreNearby()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02Test Case ID 1807118: [Avalon Service] Verify DetectClosest API Returns \'Device" +
                    "NotFound\' When No Devices Are Nearby", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "SerialNumber"});
                table2.AddRow(new string[] {
                            "2400801519"});
#line 16
 await testRunner.WhenAsync("Send a request to the DetectClosest API when no devices are nearby.", ((string)(null)), table2, "When ");
#line hidden
#line 19
 await testRunner.ThenAsync("API returns null for device node data and status of DetectClosest as \"DeviceNotFo" +
                        "und\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03Test Case ID 1809107: [Avalon Service] Verify DetectWired API Returns \'DeviceNo" +
            "tFound\' When No Device Is Found for Monaural Side")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _03TestCaseID1809107AvalonServiceVerifyDetectWiredAPIReturnsDeviceNotFoundWhenNoDeviceIsFoundForMonauralSide()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03Test Case ID 1809107: [Avalon Service] Verify DetectWired API Returns \'DeviceNo" +
                    "tFound\' When No Device Is Found for Monaural Side", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "SerialNumber"});
                table3.AddRow(new string[] {
                            "2400801519"});
#line 24
 await testRunner.WhenAsync("Send a request to the DetectWired API with a valid monoaural side (e.g., \"Left/Ri" +
                        "ght\") when no device is connected", ((string)(null)), table3, "When ");
#line hidden
#line 27
 await testRunner.ThenAsync("API returns null for device node data and status for DetectWired \"DeviceNotFound\"" +
                        "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04Test Case ID 1809120: [Avalon Service] Verify DeviceNodeData API Returns \'Null\'" +
            " When No Device Is Connected")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _04TestCaseID1809120AvalonServiceVerifyDeviceNodeDataAPIReturnsNullWhenNoDeviceIsConnected()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04Test Case ID 1809120: [Avalon Service] Verify DeviceNodeData API Returns \'Null\'" +
                    " When No Device Is Connected", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "SerialNumber"});
                table4.AddRow(new string[] {
                            "2400801519"});
#line 32
 await testRunner.WhenAsync("Ensure that no device is connected and Send a request to the DeviceNodeData API", ((string)(null)), table4, "When ");
#line hidden
#line 35
 await testRunner.ThenAsync("API returns null for device node data", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05Test Case ID 1809116: [Avalon Service] Verify ConnectToDevice API Returns \'Conn" +
            "ectFailed\' When Device Connection Fails")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _05TestCaseID1809116AvalonServiceVerifyConnectToDeviceAPIReturnsConnectFailedWhenDeviceConnectionFails()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("05Test Case ID 1809116: [Avalon Service] Verify ConnectToDevice API Returns \'Conn" +
                    "ectFailed\' When Device Connection Fails", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "SerialNumber"});
                table5.AddRow(new string[] {
                            "2400801519"});
#line 40
 await testRunner.WhenAsync("Simulate where a valid device node is detected but the connection to the device a" +
                        "nd Send a request to the ConnectToDevice API", ((string)(null)), table5, "When ");
#line hidden
#line 43
 await testRunner.ThenAsync("API returns status \"ConnectFailed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06Test Case ID 1809118: [Avalon Service] Verify ConnectToDevice API Returns \'Hear" +
            "ingInstrumentCreationFailed\' When Device Model Is Not Found in Product Configura" +
            "tion Database")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _06TestCaseID1809118AvalonServiceVerifyConnectToDeviceAPIReturnsHearingInstrumentCreationFailedWhenDeviceModelIsNotFoundInProductConfigurationDatabase()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("06Test Case ID 1809118: [Avalon Service] Verify ConnectToDevice API Returns \'Hear" +
                    "ingInstrumentCreationFailed\' When Device Model Is Not Found in Product Configura" +
                    "tion Database", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "SerialNumber"});
                table6.AddRow(new string[] {
                            "2400801519"});
#line 48
 await testRunner.WhenAsync("Send a request to the ConnectToDevice API with a valid node data where the device" +
                        " model not listed in the product configuration database", ((string)(null)), table6, "When ");
#line hidden
#line 51
  await testRunner.ThenAsync("API returns the status \"HearingInstrumentCreationFailed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("07Test Case ID 1809119: [Avalon Service] Verify ConnectToDevice API Returns \'Auth" +
            "enticationFailed\' When Device Has Been Powered for More Than 3 Minutes")]
        [NUnit.Framework.CategoryAttribute("HearingInstrument")]
        public async global::System.Threading.Tasks.Task _07TestCaseID1809119AvalonServiceVerifyConnectToDeviceAPIReturnsAuthenticationFailedWhenDeviceHasBeenPoweredForMoreThan3Minutes()
        {
            string[] tagsOfScenario = new string[] {
                    "HearingInstrument"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("07Test Case ID 1809119: [Avalon Service] Verify ConnectToDevice API Returns \'Auth" +
                    "enticationFailed\' When Device Has Been Powered for More Than 3 Minutes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "SerialNumber"});
                table7.AddRow(new string[] {
                            "2400801519"});
#line 56
 await testRunner.WhenAsync("Select a device that has been powered on for more than 3 minutes, then attempt to" +
                        " connect using the ConnectToDevice API", ((string)(null)), table7, "When ");
#line hidden
#line 59
 await testRunner.ThenAsync("API returns status for ConnectToDevice \"AuthenticationFailed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
