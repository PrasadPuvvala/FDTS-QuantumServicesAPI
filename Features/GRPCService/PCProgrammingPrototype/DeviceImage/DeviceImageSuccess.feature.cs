// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace QuantumServicesAPI.Features.GRPCService.PCProgrammingPrototype.DeviceImage
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DeviceImage Success")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class DeviceImageSuccessFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/GRPCService/PCProgrammingPrototype/DeviceImage", "DeviceImage Success", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "DeviceImageSuccess.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01Test Case ID 1810722: [Avalon Service] Verify UpdateHDI API Updates HDI Version" +
            " When Image Has Higher Version and Flash Write Protect Is Not LockedPermanent")]
        [NUnit.Framework.CategoryAttribute("DeviceImage")]
        public async global::System.Threading.Tasks.Task _01TestCaseID1810722AvalonServiceVerifyUpdateHDIAPIUpdatesHDIVersionWhenImageHasHigherVersionAndFlashWriteProtectIsNotLockedPermanent()
        {
            string[] tagsOfScenario = new string[] {
                    "DeviceImage"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01Test Case ID 1810722: [Avalon Service] Verify UpdateHDI API Updates HDI Version" +
                    " When Image Has Higher Version and Flash Write Protect Is Not LockedPermanent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "SerialNumber"});
                table1.AddRow(new string[] {
                            "2400809347"});
#line 8
 await testRunner.WhenAsync("Load a DFU image with a higher HDI version than the device, ensure Flash Write Pr" +
                        "otect is not set to \"LockedPermanent\", and send a request to the UpdateHDI API", ((string)(null)), table1, "When ");
#line hidden
#line 11
 await testRunner.ThenAsync("API updates the HDI in the device before writing the image", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02Test Case ID 1810723: [Avalon Service] Verify UpdateHDI API Skips HDI Update Wh" +
            "en Flash Write Protect Is LockedPermanent")]
        [NUnit.Framework.CategoryAttribute("DeviceImage")]
        public async global::System.Threading.Tasks.Task _02TestCaseID1810723AvalonServiceVerifyUpdateHDIAPISkipsHDIUpdateWhenFlashWriteProtectIsLockedPermanent()
        {
            string[] tagsOfScenario = new string[] {
                    "DeviceImage"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02Test Case ID 1810723: [Avalon Service] Verify UpdateHDI API Skips HDI Update Wh" +
                    "en Flash Write Protect Is LockedPermanent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
 await testRunner.WhenAsync("Load a DFU image with a higher HDI version than the device, and set device Flash " +
                        "Write Protect status to \"LockedPermanent\", and send a request to the UpdateHDI A" +
                        "PI", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
 await testRunner.ThenAsync("API does not update the HDI in the device", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03Test Case ID 1810711: [Avalon Service] Verify CheckDFUCompatibility API Returns" +
            " True When Image HDI Version Is Equal or Higher Than Device HDI Version")]
        [NUnit.Framework.CategoryAttribute("DeviceImage")]
        public async global::System.Threading.Tasks.Task _03TestCaseID1810711AvalonServiceVerifyCheckDFUCompatibilityAPIReturnsTrueWhenImageHDIVersionIsEqualOrHigherThanDeviceHDIVersion()
        {
            string[] tagsOfScenario = new string[] {
                    "DeviceImage"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03Test Case ID 1810711: [Avalon Service] Verify CheckDFUCompatibility API Returns" +
                    " True When Image HDI Version Is Equal or Higher Than Device HDI Version", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 22
 await testRunner.WhenAsync("Load a DFU image with an equal or higher HDI version than the one on the device a" +
                        "nd send a compatibility check request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
 await testRunner.ThenAsync("API returns \"True\" indicating the DFU image is compatible", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04Test Case ID 1810710: [Avalon Service] Verify CheckDFUCompatibility API Returns" +
            " False When Image HDI Version Is Lower Than Device HDI Version")]
        [NUnit.Framework.CategoryAttribute("DeviceImage")]
        public async global::System.Threading.Tasks.Task _04TestCaseID1810710AvalonServiceVerifyCheckDFUCompatibilityAPIReturnsFalseWhenImageHDIVersionIsLowerThanDeviceHDIVersion()
        {
            string[] tagsOfScenario = new string[] {
                    "DeviceImage"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04Test Case ID 1810710: [Avalon Service] Verify CheckDFUCompatibility API Returns" +
                    " False When Image HDI Version Is Lower Than Device HDI Version", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 28
 await testRunner.WhenAsync("Load a DFU image with a lower HDI version than the one on the device and send a c" +
                        "ompatibility check request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
 await testRunner.ThenAsync("API returns \"False\" indicating the DFU image is not compatible", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05Test Case ID 1810717: [Avalon Service] Verify WriteFDI API Successfully Writes " +
            "Image to Device When Optimized Programming Is False")]
        [NUnit.Framework.CategoryAttribute("DeviceImage")]
        public async global::System.Threading.Tasks.Task _05TestCaseID1810717AvalonServiceVerifyWriteFDIAPISuccessfullyWritesImageToDeviceWhenOptimizedProgrammingIsFalse()
        {
            string[] tagsOfScenario = new string[] {
                    "DeviceImage"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("05Test Case ID 1810717: [Avalon Service] Verify WriteFDI API Successfully Writes " +
                    "Image to Device When Optimized Programming Is False", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 34
 await testRunner.WhenAsync("Load a valid DFU image, set isOptimizedProgramming to \"false\", and send a request" +
                        " to WriteFDI API", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
 await testRunner.ThenAsync("API writes the image to the device successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06Test Case 1810718: [Avalon Service] Verify WriteFDI API does not Write Image Wh" +
            "en Optimized Programming Is Set to True")]
        [NUnit.Framework.CategoryAttribute("DeviceImage")]
        public async global::System.Threading.Tasks.Task _06TestCase1810718AvalonServiceVerifyWriteFDIAPIDoesNotWriteImageWhenOptimizedProgrammingIsSetToTrue()
        {
            string[] tagsOfScenario = new string[] {
                    "DeviceImage"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("06Test Case 1810718: [Avalon Service] Verify WriteFDI API does not Write Image Wh" +
                    "en Optimized Programming Is Set to True", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 40
 await testRunner.WhenAsync("Load a valid DFU image, set isOptimizedProgramming to \"true\", and send a request " +
                        "to WriteFDI API", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
 await testRunner.ThenAsync("API does not write the image to the device", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
