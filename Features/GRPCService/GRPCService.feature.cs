// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace QuantumServicesAPI.Features.GRPCService
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GRPCService")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class GRPCServiceFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/GRPCService", "GRPCService", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GRPCService.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01 GRPC Services for Initialize method")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _01GRPCServicesForInitializeMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01 GRPC Services for Initialize method", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.WhenAsync("I call the Initialize method on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 8
 await testRunner.ThenAsync("Verify the response for the Initialize method on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02 GRPC Service for ConfigureProduct")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _02GRPCServiceForConfigureProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02 GRPC Service for ConfigureProduct", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 12
 await testRunner.WhenAsync("I call the ConfigureProduct on the GRPC service with folder path \"C:\\\\ProgramData" +
                        "\\\\GN GOP\\\\Configuration\\\\FDTS\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 13
 await testRunner.ThenAsync("Verify the response for the ConfigureProduct on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03 GRPC Service for DetectBySerialNumber")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _03GRPCServiceForDetectBySerialNumber()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03 GRPC Service for DetectBySerialNumber", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 17
 await testRunner.WhenAsync("I call the DetectBySerialNumber on the GRPC service with serialnumber \"2400800242" +
                        "\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
 await testRunner.ThenAsync("Verify the response for the DetectBySerialNumber on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04 GRPC Service for DetectClosest")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _04GRPCServiceForDetectClosest()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04 GRPC Service for DetectClosest", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 22
 await testRunner.WhenAsync("I call the DetectClosest on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
 await testRunner.ThenAsync("Verify the response for the DetectClosest on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05 GRPC Service for DetectOnSide")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _05GRPCServiceForDetectOnSide()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("05 GRPC Service for DetectOnSide", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 27
 await testRunner.WhenAsync("I call the DetectOnSide on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
 await testRunner.ThenAsync("Verify the response for the DetectOnSide on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06 GRPC Service for EnableMasterConnect")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _06GRPCServiceForEnableMasterConnect()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("06 GRPC Service for EnableMasterConnect", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 32
 await testRunner.WhenAsync("I call the EnableMasterConnect on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
 await testRunner.ThenAsync("Verify the response for the EnableMasterConnect on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("07 GRPC Service for EnableFittingMode")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _07GRPCServiceForEnableFittingMode()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("07 GRPC Service for EnableFittingMode", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 37
 await testRunner.WhenAsync("I call the EnableFittingMode on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
 await testRunner.ThenAsync("Verify the response for the EnableFittingMode on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("08 GRPC Service for GetDeviceNode")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _08GRPCServiceForGetDeviceNode()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("08 GRPC Service for GetDeviceNode", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 42
 await testRunner.WhenAsync("I call the GetDeviceNode on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
 await testRunner.ThenAsync("Verify the response for the GetDeviceNode on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("09 GRPC Service for Connect")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _09GRPCServiceForConnect()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("09 GRPC Service for Connect", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 47
 await testRunner.WhenAsync("I call the Connect on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 48
 await testRunner.ThenAsync("Verify the response for the Connect on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("10 GRPC Service for GetBootMode")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _10GRPCServiceForGetBootMode()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("10 GRPC Service for GetBootMode", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
 await testRunner.WhenAsync("I call the GetBootMode on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 53
 await testRunner.ThenAsync("Verify the response for the GetBootMode on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("11 GRPC Service for Boot")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _11GRPCServiceForBoot()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("11 GRPC Service for Boot", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 57
 await testRunner.WhenAsync("I call the Boot on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
 await testRunner.ThenAsync("Verify the response for the Boot on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("12 GRPC Service for GetFlashWriteProtectStatus")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _12GRPCServiceForGetFlashWriteProtectStatus()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("12 GRPC Service for GetFlashWriteProtectStatus", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 62
 await testRunner.WhenAsync("I call the GetFlashWriteProtectStatus on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 63
 await testRunner.ThenAsync("Verify the response for the GetFlashWriteProtectStatus on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("13 GRPC Service for SetFlashWriteProtectState")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _13GRPCServiceForSetFlashWriteProtectState()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("13 GRPC Service for SetFlashWriteProtectState", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 67
 await testRunner.WhenAsync("I call the SetFlashWriteProtectState on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 68
 await testRunner.ThenAsync("Verify the response for the SetFlashWriteProtectState on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("14 GRPC Service for IsRechargeable")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _14GRPCServiceForIsRechargeable()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("14 GRPC Service for IsRechargeable", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 72
 await testRunner.WhenAsync("I call the IsRechargeable on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 73
 await testRunner.ThenAsync("Verify the response for the IsRechargeable on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("15 GRPC Service for GetBatteryLevel")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _15GRPCServiceForGetBatteryLevel()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("15 GRPC Service for GetBatteryLevel", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 77
 await testRunner.WhenAsync("I call the GetBatteryLevel on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 78
 await testRunner.ThenAsync("Verify the response for the GetBatteryLevel on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("16 GRPC Service for ShouldVerifyMfiChip")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _16GRPCServiceForShouldVerifyMfiChip()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("16 GRPC Service for ShouldVerifyMfiChip", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 82
 await testRunner.WhenAsync("I call the ShouldVerifyMfiChip on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 83
 await testRunner.ThenAsync("Verify the response for the ShouldVerifyMfiChip on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("17 GRPC Service for VerifyMfiChipIsHealthy")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _17GRPCServiceForVerifyMfiChipIsHealthy()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("17 GRPC Service for VerifyMfiChipIsHealthy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 87
 await testRunner.WhenAsync("I call the VerifyMfiChipIsHealthy on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 88
 await testRunner.ThenAsync("Verify the response for the VerifyMfiChipIsHealthy on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("18 GRPC Service for GetBatteryType")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _18GRPCServiceForGetBatteryType()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("18 GRPC Service for GetBatteryType", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 92
 await testRunner.WhenAsync("I call the GetBatteryType on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 93
 await testRunner.ThenAsync("Verify the response for the GetBatteryType on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("19 GRPC Service for SetBatteryType")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _19GRPCServiceForSetBatteryType()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("19 GRPC Service for SetBatteryType", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 97
 await testRunner.WhenAsync("I call the SetBatteryType on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 98
 await testRunner.ThenAsync("Verify the response for the SetBatteryType on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("20 GRPC Service for GetBatteryVoltage")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _20GRPCServiceForGetBatteryVoltage()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("20 GRPC Service for GetBatteryVoltage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 102
 await testRunner.WhenAsync("I call the GetBatteryVoltage on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 103
 await testRunner.ThenAsync("Verify the response for the GetBatteryVoltage on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("21 GRPC Service for MakeDeviceFunctional")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _21GRPCServiceForMakeDeviceFunctional()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("21 GRPC Service for MakeDeviceFunctional", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 107
 await testRunner.WhenAsync("I call the MakeDeviceFunctional on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 108
 await testRunner.ThenAsync("Verify the response for the MakeDeviceFunctional on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("22 GRPC Service for SetPowerOff")]
        [NUnit.Framework.CategoryAttribute("GRPCService")]
        public async global::System.Threading.Tasks.Task _22GRPCServiceForSetPowerOff()
        {
            string[] tagsOfScenario = new string[] {
                    "GRPCService"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("22 GRPC Service for SetPowerOff", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 112
 await testRunner.WhenAsync("I call the SetPowerOff on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 113
 await testRunner.ThenAsync("Verify the response for the SetPowerOff on the GRPC service", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
