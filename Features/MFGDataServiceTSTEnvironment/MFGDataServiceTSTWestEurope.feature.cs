// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace QuantumServicesAPI.Features.MFGDataServiceTSTEnvironment
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MFG Data Service - TST Environment (West Europe Region)")]
    public partial class MFGDataService_TSTEnvironmentWestEuropeRegionFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/MFGDataServiceTSTEnvironment", "MFG Data Service - TST Environment (West Europe Region)", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "MFGDataServiceTSTWestEurope.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01Test Case ID 1784675: Verify that the MFG Data Service processes valid compress" +
            "ed JSON test data within the allowed size")]
        [NUnit.Framework.CategoryAttribute("1784675")]
        [NUnit.Framework.CategoryAttribute("TST")]
        [NUnit.Framework.CategoryAttribute("WestEurope")]
        public async System.Threading.Tasks.Task _01TestCaseID1784675VerifyThatTheMFGDataServiceProcessesValidCompressedJSONTestDataWithinTheAllowedSize()
        {
            string[] tagsOfScenario = new string[] {
                    "1784675",
                    "TST",
                    "WestEurope"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01Test Case ID 1784675: Verify that the MFG Data Service processes valid compress" +
                    "ed JSON test data within the allowed size", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "MFGDataFile",
                            "Env",
                            "Region",
                            "APIkey"});
                table1.AddRow(new string[] {
                            "file.zip",
                            "tst",
                            "europe",
                            "4038ebf7e3ea45c29795b494d02fb117"});
#line 8
 await testRunner.WhenAsync("Send a request to MFG data service with a compressed JSON below 256 kb", ((string)(null)), table1, "When ");
#line hidden
#line 11
 await testRunner.ThenAsync("Verify the response with the compressed data", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02Test Case ID 1785191: Verify that the MFG Data Service rejects uncompressed JSO" +
            "N test data")]
        [NUnit.Framework.CategoryAttribute("1785191")]
        [NUnit.Framework.CategoryAttribute("TST")]
        [NUnit.Framework.CategoryAttribute("WestEurope")]
        public async System.Threading.Tasks.Task _02TestCaseID1785191VerifyThatTheMFGDataServiceRejectsUncompressedJSONTestData()
        {
            string[] tagsOfScenario = new string[] {
                    "1785191",
                    "TST",
                    "WestEurope"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02Test Case ID 1785191: Verify that the MFG Data Service rejects uncompressed JSO" +
                    "N test data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "MFGDataFile",
                            "Env",
                            "Region",
                            "APIkey"});
                table2.AddRow(new string[] {
                            "json_valid.json",
                            "tst",
                            "europe",
                            "4038ebf7e3ea45c29795b494d02fb117"});
#line 16
 await testRunner.WhenAsync("Send a request to MFG data service with an uncompressed JSON", ((string)(null)), table2, "When ");
#line hidden
#line 19
 await testRunner.ThenAsync("Verify the response with the uncompressed data", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03Test Case ID 1784417: Verify that the MFG Data Service rejects requests without" +
            "/invalid API key")]
        [NUnit.Framework.CategoryAttribute("1784417")]
        [NUnit.Framework.CategoryAttribute("TST")]
        [NUnit.Framework.CategoryAttribute("WestEurope")]
        public async System.Threading.Tasks.Task _03TestCaseID1784417VerifyThatTheMFGDataServiceRejectsRequestsWithoutInvalidAPIKey()
        {
            string[] tagsOfScenario = new string[] {
                    "1784417",
                    "TST",
                    "WestEurope"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03Test Case ID 1784417: Verify that the MFG Data Service rejects requests without" +
                    "/invalid API key", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "MFGDataFile",
                            "Env",
                            "Region",
                            "APIkey"});
                table3.AddRow(new string[] {
                            "file.zip",
                            "tst",
                            "europe",
                            "1234567890"});
#line 24
 await testRunner.WhenAsync("Send a request to the MFG Data Service invalid API key", ((string)(null)), table3, "When ");
#line hidden
#line 27
 await testRunner.ThenAsync("Verify the API response", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "MFGDataFile",
                            "Env",
                            "Region",
                            "APIkey"});
                table4.AddRow(new string[] {
                            "file.zip",
                            "tst",
                            "europe",
                            ""});
#line 28
 await testRunner.WhenAsync("Send a request to the MFG Data Service without API key", ((string)(null)), table4, "When ");
#line hidden
#line 31
 await testRunner.ThenAsync("Verify the API response", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04Test Case ID 1784416: Verify that the MFG Data Service API rejects requests usi" +
            "ng an API key from a different cloud region")]
        [NUnit.Framework.CategoryAttribute("1784416")]
        [NUnit.Framework.CategoryAttribute("TST")]
        [NUnit.Framework.CategoryAttribute("WestEurope")]
        public async System.Threading.Tasks.Task _04TestCaseID1784416VerifyThatTheMFGDataServiceAPIRejectsRequestsUsingAnAPIKeyFromADifferentCloudRegion()
        {
            string[] tagsOfScenario = new string[] {
                    "1784416",
                    "TST",
                    "WestEurope"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04Test Case ID 1784416: Verify that the MFG Data Service API rejects requests usi" +
                    "ng an API key from a different cloud region", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "MFGDataFile",
                            "Env",
                            "Region",
                            "APIkey"});
                table5.AddRow(new string[] {
                            "file.zip",
                            "tst",
                            "europe",
                            "d71a0c7fc0e74b058bd66488e2ac9210"});
#line 36
 await testRunner.WhenAsync("Send a request to the MFG Data Service using an API key from a different cloud re" +
                        "gion (Ex: use an EastUS API key for WestEurope)", ((string)(null)), table5, "When ");
#line hidden
#line 39
 await testRunner.ThenAsync("Verify the API response", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
