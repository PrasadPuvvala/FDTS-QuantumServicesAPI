// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace QuantumServicesAPI.Features.MFGDataService
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MFG Data Service")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("DataSource:mfg-environments.json")]
    [NUnit.Framework.CategoryAttribute("DataSet:MfgDataService")]
    public partial class MFGDataServiceFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "DataSource:mfg-environments.json",
                "DataSet:MfgDataService"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/MFGDataService", "MFG Data Service", @"A short summary of the feature:
The MFG Data Service feature verifies the correct processing, validation, and authentication of manufacturing data submissions via API. It covers scenarios for handling compressed and uncompressed JSON, format and size constraints, API key authentication, environment accessibility, cloud region deployment, and response time requirements.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "MFGDataService.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01Test Case ID 1784675: Verify that the MFG Data Service processes valid compress" +
            "ed JSON test data within the allowed size")]
        [NUnit.Framework.CategoryAttribute("mfgdataservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/mfg-data-service/v1", "71a70650274d47e39dee5f00c9950007", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/mfg-data-service/v1", "7fc67228750046a1a9e364d725db6c9b", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/mfg-data-service/v1", "86065fd57ea04e32bb2e52cf8b3d84f8", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/mfg-data-service/v1", "4038ebf7e3ea45c29795b494d02fb117", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/mfg-data-service/v1", "d71a0c7fc0e74b058bd66488e2ac9210", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/mfg-data-service/v1", "c8aa703e5ef24b6ab4a28688f6c0bcd7", null)]
        public async global::System.Threading.Tasks.Task _01TestCaseID1784675VerifyThatTheMFGDataServiceProcessesValidCompressedJSONTestDataWithinTheAllowedSize(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mfgdataservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01Test Case ID 1784675: Verify that the MFG Data Service processes valid compress" +
                    "ed JSON test data within the allowed size", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
 await testRunner.WhenAsync(string.Format("Send a request to MFG data service with a compressed JSON below 256 kb using base" +
                            "Url \"{0}\" and apiKey \"{1}\"", baseUrl, apiKey), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
 await testRunner.ThenAsync("Verify the response with the compressed data", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02Test Case ID 1785191: Verify that the MFG Data Service rejects uncompressed JSO" +
            "N test data")]
        [NUnit.Framework.CategoryAttribute("mfgdataservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/mfg-data-service/v1", "71a70650274d47e39dee5f00c9950007", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/mfg-data-service/v1", "7fc67228750046a1a9e364d725db6c9b", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/mfg-data-service/v1", "86065fd57ea04e32bb2e52cf8b3d84f8", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/mfg-data-service/v1", "4038ebf7e3ea45c29795b494d02fb117", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/mfg-data-service/v1", "d71a0c7fc0e74b058bd66488e2ac9210", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/mfg-data-service/v1", "c8aa703e5ef24b6ab4a28688f6c0bcd7", null)]
        public async global::System.Threading.Tasks.Task _02TestCaseID1785191VerifyThatTheMFGDataServiceRejectsUncompressedJSONTestData(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mfgdataservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02Test Case ID 1785191: Verify that the MFG Data Service rejects uncompressed JSO" +
                    "N test data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "MFGDataFile"});
                table3.AddRow(new string[] {
                            "json_valid.json"});
#line 29
 await testRunner.WhenAsync(string.Format("Send a request to MFG data service with an uncompressed JSON using baseUrl \"{0}\" " +
                            "and apiKey \"{1}\"", baseUrl, apiKey), ((string)(null)), table3, "When ");
#line hidden
#line 32
 await testRunner.ThenAsync("Verify the response with the uncompressed data", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03Test Case ID 1784417: Verify that the MFG Data Service rejects requests without" +
            "/invalid API key")]
        [NUnit.Framework.CategoryAttribute("mfgdataservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/mfg-data-service/v1", "71a70650274d47e39dee5f00c9950007", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/mfg-data-service/v1", "7fc67228750046a1a9e364d725db6c9b", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/mfg-data-service/v1", "86065fd57ea04e32bb2e52cf8b3d84f8", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/mfg-data-service/v1", "4038ebf7e3ea45c29795b494d02fb117", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/mfg-data-service/v1", "d71a0c7fc0e74b058bd66488e2ac9210", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/mfg-data-service/v1", "c8aa703e5ef24b6ab4a28688f6c0bcd7", null)]
        public async global::System.Threading.Tasks.Task _03TestCaseID1784417VerifyThatTheMFGDataServiceRejectsRequestsWithoutInvalidAPIKey(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mfgdataservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03Test Case ID 1784417: Verify that the MFG Data Service rejects requests without" +
                    "/invalid API key", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 37
 await testRunner.WhenAsync(string.Format("Send a request to the MFG Data Service using an invalid API key \"{0}\" with baseUr" +
                            "l \"{1}\"", apiKey, baseUrl), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
 await testRunner.ThenAsync("Verify the API response", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 39
 await testRunner.WhenAsync(string.Format("Send a request to the MFG Data Service without API key \"{0}\" with baseUrl \"{1}\"", apiKey, baseUrl), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
 await testRunner.ThenAsync("Verify the API response", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04Test Case ID 1785192: Verify that the API rejects unsupported formats and size " +
            "Constraints")]
        [NUnit.Framework.CategoryAttribute("mfgdataservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/mfg-data-service/v1", "71a70650274d47e39dee5f00c9950007", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/mfg-data-service/v1", "7fc67228750046a1a9e364d725db6c9b", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/mfg-data-service/v1", "86065fd57ea04e32bb2e52cf8b3d84f8", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/mfg-data-service/v1", "4038ebf7e3ea45c29795b494d02fb117", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/mfg-data-service/v1", "d71a0c7fc0e74b058bd66488e2ac9210", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/mfg-data-service/v1", "c8aa703e5ef24b6ab4a28688f6c0bcd7", null)]
        public async global::System.Threading.Tasks.Task _04TestCaseID1785192VerifyThatTheAPIRejectsUnsupportedFormatsAndSizeConstraints(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mfgdataservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04Test Case ID 1785192: Verify that the API rejects unsupported formats and size " +
                    "Constraints", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "MFGDataFile"});
                table4.AddRow(new string[] {
                            "validxml.zip"});
                table4.AddRow(new string[] {
                            "validtxt.zip"});
#line 45
 await testRunner.WhenAsync(string.Format("Send a request to MFG data service with an unsupported format using baseUrl \"{0}\"" +
                            " and apiKey \"{1}\" and verify the response with the unsupported format", baseUrl, apiKey), ((string)(null)), table4, "When ");
#line hidden
#line 49
 await testRunner.AndAsync(string.Format("Send a request to MFG data service with a compressed JSON below 256 kb using base" +
                            "Url \"{0}\" and apiKey \"{1}\"", baseUrl, apiKey), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
 await testRunner.ThenAsync("Verify the response with the compressed JSON below 256 kb", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "MFGDataFile"});
                table5.AddRow(new string[] {
                            "large_json_file.zip"});
#line 51
 await testRunner.WhenAsync(string.Format("Send a request to MFG data service with a compressed JSON more 256 kb using baseU" +
                            "rl \"{0}\" and apiKey \"{1}\"", baseUrl, apiKey), ((string)(null)), table5, "When ");
#line hidden
#line 54
 await testRunner.ThenAsync("Verify the response with the compressed JSON more 256 kb", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05Test Case ID 1784415: Verify that the MFG Data Service authenticates requests w" +
            "ith a valid API key per cloud region")]
        [NUnit.Framework.CategoryAttribute("mfgdataservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/mfg-data-service/v1", "71a70650274d47e39dee5f00c9950007", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/mfg-data-service/v1", "7fc67228750046a1a9e364d725db6c9b", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/mfg-data-service/v1", "86065fd57ea04e32bb2e52cf8b3d84f8", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/mfg-data-service/v1", "4038ebf7e3ea45c29795b494d02fb117", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/mfg-data-service/v1", "d71a0c7fc0e74b058bd66488e2ac9210", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/mfg-data-service/v1", "c8aa703e5ef24b6ab4a28688f6c0bcd7", null)]
        public async global::System.Threading.Tasks.Task _05TestCaseID1784415VerifyThatTheMFGDataServiceAuthenticatesRequestsWithAValidAPIKeyPerCloudRegion(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mfgdataservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("05Test Case ID 1784415: Verify that the MFG Data Service authenticates requests w" +
                    "ith a valid API key per cloud region", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 59
 await testRunner.WhenAsync(string.Format("Send a request to MFG data service using baseUrl \"{0}\" and a valid API Key \"{1}\"", baseUrl, apiKey), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 60
 await testRunner.ThenAsync("Verify the response", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06Test Case ID 1784139: Verify that the MFG Data Service is accessible in all spe" +
            "cified environments")]
        [NUnit.Framework.CategoryAttribute("mfgdataservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/mfg-data-service/v1", "71a70650274d47e39dee5f00c9950007", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/mfg-data-service/v1", "7fc67228750046a1a9e364d725db6c9b", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/mfg-data-service/v1", "86065fd57ea04e32bb2e52cf8b3d84f8", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/mfg-data-service/v1", "4038ebf7e3ea45c29795b494d02fb117", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/mfg-data-service/v1", "d71a0c7fc0e74b058bd66488e2ac9210", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/mfg-data-service/v1", "c8aa703e5ef24b6ab4a28688f6c0bcd7", null)]
        public async global::System.Threading.Tasks.Task _06TestCaseID1784139VerifyThatTheMFGDataServiceIsAccessibleInAllSpecifiedEnvironments(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mfgdataservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("06Test Case ID 1784139: Verify that the MFG Data Service is accessible in all spe" +
                    "cified environments", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 65
 await testRunner.WhenAsync(string.Format("Send a request to the MFG Data Service \"{0}\" Environment and \"{1}\" Region using b" +
                            "aseUrl \"{2}\" and apiKey \"{3}\"", environment, region, baseUrl, apiKey), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 66
 await testRunner.ThenAsync("Verify the response", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("07Test Case ID 1789180: Verify MFG Data Service Deployment in Each Cloud Region")]
        [NUnit.Framework.CategoryAttribute("mfgdataservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/mfg-data-service/v1", "71a70650274d47e39dee5f00c9950007", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/mfg-data-service/v1", "7fc67228750046a1a9e364d725db6c9b", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/mfg-data-service/v1", "86065fd57ea04e32bb2e52cf8b3d84f8", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/mfg-data-service/v1", "4038ebf7e3ea45c29795b494d02fb117", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/mfg-data-service/v1", "d71a0c7fc0e74b058bd66488e2ac9210", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/mfg-data-service/v1", "c8aa703e5ef24b6ab4a28688f6c0bcd7", null)]
        public async global::System.Threading.Tasks.Task _07TestCaseID1789180VerifyMFGDataServiceDeploymentInEachCloudRegion(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mfgdataservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("07Test Case ID 1789180: Verify MFG Data Service Deployment in Each Cloud Region", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 71
 await testRunner.WhenAsync(string.Format("Send a request to the MFG Data Service \"{0}\" Environment and \"{1}\" cloud Region u" +
                            "sing baseUrl \"{2}\" and apiKey \"{3}\"", environment, region, baseUrl, apiKey), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 72
 await testRunner.ThenAsync("Verify the response", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("08Test Case ID 1784416: Verify that the MFG Data Service API rejects requests usi" +
            "ng an API key from a different cloud region")]
        [NUnit.Framework.CategoryAttribute("mfgdataservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/mfg-data-service/v1", "71a70650274d47e39dee5f00c9950007", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/mfg-data-service/v1", "7fc67228750046a1a9e364d725db6c9b", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/mfg-data-service/v1", "86065fd57ea04e32bb2e52cf8b3d84f8", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/mfg-data-service/v1", "4038ebf7e3ea45c29795b494d02fb117", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/mfg-data-service/v1", "d71a0c7fc0e74b058bd66488e2ac9210", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/mfg-data-service/v1", "c8aa703e5ef24b6ab4a28688f6c0bcd7", null)]
        public async global::System.Threading.Tasks.Task _08TestCaseID1784416VerifyThatTheMFGDataServiceAPIRejectsRequestsUsingAnAPIKeyFromADifferentCloudRegion(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mfgdataservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("08Test Case ID 1784416: Verify that the MFG Data Service API rejects requests usi" +
                    "ng an API key from a different cloud region", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 77
 await testRunner.WhenAsync(string.Format("Send a request to the MFG Data Service \"{0}\" Environment and \"{1}\" cloud Region u" +
                            "sing baseUrl \"{2}\" and apiKey \"{3}\" from a different cloud region and verify the" +
                            " response", environment, region, baseUrl, apiKey), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("09Test Case ID 1784230: Verify the Response Time for MFG Data Service Under Norma" +
            "l Conditions")]
        [NUnit.Framework.CategoryAttribute("mfgdataservice")]
        [NUnit.Framework.TestCaseAttribute("dev", "europe", "https://dev.europe.api.apt.gn.com/mfg-data-service/v1", "71a70650274d47e39dee5f00c9950007", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "us", "https://dev.us.api.apt.gn.com/mfg-data-service/v1", "7fc67228750046a1a9e364d725db6c9b", null)]
        [NUnit.Framework.TestCaseAttribute("dev", "asia", "https://dev.asia.api.apt.gn.com/mfg-data-service/v1", "86065fd57ea04e32bb2e52cf8b3d84f8", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "europe", "https://tst.europe.api.apt.gn.com/mfg-data-service/v1", "4038ebf7e3ea45c29795b494d02fb117", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "us", "https://tst.us.api.apt.gn.com/mfg-data-service/v1", "d71a0c7fc0e74b058bd66488e2ac9210", null)]
        [NUnit.Framework.TestCaseAttribute("tst", "asia", "https://tst.asia.api.apt.gn.com/mfg-data-service/v1", "c8aa703e5ef24b6ab4a28688f6c0bcd7", null)]
        public async global::System.Threading.Tasks.Task _09TestCaseID1784230VerifyTheResponseTimeForMFGDataServiceUnderNormalConditions(string environment, string region, string baseUrl, string apiKey, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mfgdataservice"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Environment", environment);
            argumentsOfScenario.Add("Region", region);
            argumentsOfScenario.Add("BaseUrl", baseUrl);
            argumentsOfScenario.Add("ApiKey", apiKey);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("09Test Case ID 1784230: Verify the Response Time for MFG Data Service Under Norma" +
                    "l Conditions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 82
    await testRunner.WhenAsync(string.Format("Send a request to the MFG data service under normal system load using baseUrl \"{0" +
                            "}\" and apiKey \"{1}\" and verify the median response time", baseUrl, apiKey), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
